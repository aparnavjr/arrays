public class Solution {
    public IList<IList<int>> CombinationSum(int[] candidates, int target) {
        
        IList<IList<int>> result = new List<IList<int>>();
        
        List<int> temp = new List<int>();
        
        Array.Sort(candidates);
        helper(ref result,ref temp,candidates,target,0);
        
        return result;
    }
    
    public static void helper(ref IList<IList<int>> result, ref List<int> temp, int[] candidates, int target, int pos)
    {
        if(target == 0)
        {
            result.Add(new List<int>(temp));
            return;
        }
        
        for(int i = pos; i < candidates.Length;i++)
        {
            if (i > pos && candidates[i] == candidates[i - 1]) continue;
            if(target - candidates[i] >=0)
            {
                temp.Add(candidates[i]);
                helper(ref result, ref temp, candidates, target-candidates[i], i);
                temp.RemoveAt(temp.Count-1);
            }
        }
        
        
    }
}
